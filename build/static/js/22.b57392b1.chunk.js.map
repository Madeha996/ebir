{"version":3,"sources":["components/common/forms/BaseButtonsForm/BaseButtonsForm.tsx","components/common/forms/components/BaseButtonsGroup/BaseButtonsGroup.tsx","components/profile/profileCard/profileFormNav/nav/notifications/CheckboxColumn/CheckboxColumn.styles.ts","components/profile/profileCard/profileFormNav/nav/notifications/CheckboxColumn/CheckboxColumn.tsx","components/profile/profileCard/profileFormNav/nav/notifications/NotificationsTypes/NotificationsTypes.styles.ts","components/profile/profileCard/profileFormNav/nav/notifications/NotificationsTypes/NotificationsTypes.tsx","components/profile/profileCard/profileFormNav/nav/notifications/Notifications/Notifications.styles.ts","components/profile/profileCard/profileFormNav/nav/notifications/Notifications/Notifications.tsx","pages/NotificationsPage.tsx"],"names":["BaseButtonsForm","_ref","form","isFieldsChanged","setFieldsChanged","footer","loading","children","props","formDefault","BaseForm","useForm","currentForm","_jsxs","_jsx","BaseButtonsGroup","onCancel","resetFields","Title","BaseFormTitle","Item","BaseFormItem","List","BaseFormList","Provider","className","t","useTranslation","Row","gutter","wrap","Col","span","Button","block","type","onClick","htmlType","styled","div","_templateObject","_taggedTemplateLiteral","height","minWidth","fontWeight","padding","display","alignItems","justifyContent","media","md","xl","Wrapper","_templateObject2","HeaderCol","_templateObject3","CheckboxColumn","column","handleCheck","setTriggered","checkedList","setCheckedList","React","useState","indeterminate","setIndeterminate","checkAll","setCheckAll","onChange","event","target","checked","data","S","headerRender","header","Checkbox","Group","value","list","length","map","el","index","dataRender","NotificationsTypes","isLoading","setLoading","checkedElements","setCheckedElements","isTriggered","options","id","text","useCallback","mode","onFinish","async","setTimeout","notificationController","success","message","console","log","name","item","Description","Typography","Text","Notifications","Card","NotificationsPage","_Fragment","PageTitle"],"mappings":"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","file":"static/js/22.b57392b1.chunk.js","sourcesContent":["import React from 'react';\nimport { BaseForm, BaseFormInterface, BaseFormProps } from '@app/components/common/forms//BaseForm/BaseForm';\nimport { BaseButtonsGroup } from '@app/components/common/forms/components/BaseButtonsGroup/BaseButtonsGroup';\nimport { BaseFormTitle } from '@app/components/common/forms/components/BaseFormTitle/BaseFormTitle';\nimport { BaseFormItem } from '@app/components/common/forms/components/BaseFormItem/BaseFormItem';\nimport { BaseFormList } from '@app/components/common/forms/components/BaseFormList/BaseFormList';\n\nexport interface BaseButtonsFormProps extends BaseFormProps {\n  isFieldsChanged: boolean;\n  setFieldsChanged?: (state: boolean) => void;\n  footer?: React.ReactElement;\n  loading?: boolean;\n}\n\nexport const BaseButtonsForm: BaseFormInterface<BaseButtonsFormProps> = ({\n  form,\n  isFieldsChanged,\n  setFieldsChanged,\n  footer,\n  loading = false,\n  children,\n  ...props\n}) => {\n  const [formDefault] = BaseForm.useForm();\n  const currentForm = form || formDefault;\n\n  const onCancel = () => {\n    currentForm?.resetFields();\n    setFieldsChanged && setFieldsChanged(false);\n  };\n\n  return (\n    <BaseForm form={currentForm} {...props}>\n      {children}\n      {isFieldsChanged && (footer || <BaseButtonsGroup loading={loading} onCancel={onCancel} />)}\n    </BaseForm>\n  );\n};\n\nBaseButtonsForm.Title = BaseFormTitle;\nBaseButtonsForm.Item = BaseFormItem;\nBaseButtonsForm.List = BaseFormList;\nBaseButtonsForm.useForm = BaseForm.useForm;\nBaseButtonsForm.Provider = BaseForm.Provider;\n","import React, { ComponentProps } from 'react';\nimport { Col, Row } from 'antd';\nimport { Button } from '@app/components/common/buttons/Button/Button';\nimport { useTranslation } from 'react-i18next';\n\ninterface BaseButtonsGroupProps extends ComponentProps<typeof Button> {\n  className?: string;\n  onCancel: () => void;\n  loading?: boolean;\n}\n\nexport const BaseButtonsGroup: React.FC<BaseButtonsGroupProps> = ({ className, onCancel, loading, ...props }) => {\n  const { t } = useTranslation();\n\n  return (\n    <Row className={className} gutter={[10, 10]} wrap={false}>\n      <Col span={12}>\n        <Button block type=\"ghost\" onClick={onCancel} {...props}>\n          {t('common.cancel')}\n        </Button>\n      </Col>\n      <Col span={12}>\n        <Button block type=\"primary\" loading={loading} htmlType=\"submit\" {...props}>\n          {t('common.save')}\n        </Button>\n      </Col>\n    </Row>\n  );\n};\n","import styled from 'styled-components';\nimport { media } from '@app/styles/themes/constants';\n\nconst colStyles = {\n  height: '75px',\n  minWidth: '50px',\n  fontWeight: 600,\n  padding: '0.3125rem',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n};\n\nexport const Col = styled.div`\n  ${colStyles};\n\n  border-bottom: 1px solid rgba(var(--primary-rgb-color), 0.3);\n\n  @media only screen and ${media.md} {\n    justify-content: unset;\n    font-size: 1rem;\n    padding: 0.5rem;\n  }\n\n  @media only screen and ${media.xl} {\n    padding: 0.75rem;\n  }\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n\n  & .ant-checkbox-wrapper {\n    color: inherit;\n    font: inherit;\n\n    & > .ant-checkbox > .ant-checkbox-inner {\n      border-radius: 3px;\n\n      border-color: var(--primary-color);\n    }\n  }\n\n  &:last-of-type {\n    ${Col} {\n      justify-content: unset;\n    }\n  }\n`;\n\nexport const HeaderCol = styled(Col)`\n  background: var(--secondary-background-color);\n\n  border-top: 1px solid rgba(var(--primary-rgb-color), 0.3);\n\n  color: var(--primary-color);\n\n  & .ant-checkbox-wrapper {\n    flex-wrap: wrap;\n    row-gap: 0.5rem;\n    justify-content: center;\n  }\n`;\n","import React from 'react';\nimport { Checkbox } from 'antd';\nimport { Option } from '../interfaces';\nimport { CheckboxChangeEvent } from 'antd/lib/checkbox';\nimport { CheckboxValueType } from 'antd/lib/checkbox/Group';\nimport * as S from './CheckboxColumn.styles';\n\ninterface CheckboxColumnProps {\n  column: Omit<Option, 'id'>;\n  handleCheck: (list: CheckboxValueType[]) => void;\n  setTriggered: (state: boolean) => void;\n}\n\nexport const CheckboxColumn: React.FC<CheckboxColumnProps> = ({ column, handleCheck, setTriggered }) => {\n  const [checkedList, setCheckedList] = React.useState<CheckboxValueType[]>([]);\n  const [indeterminate, setIndeterminate] = React.useState(false);\n  const [checkAll, setCheckAll] = React.useState(false);\n\n  const onChange = (list: CheckboxValueType[]) => {\n    setCheckedList(list);\n    setIndeterminate(!!list.length && list.length < column.data.length);\n    setCheckAll(list.length === column.data.length);\n    handleCheck(list);\n    setTriggered(true);\n  };\n\n  const onCheckAllChange = (event: CheckboxChangeEvent) => {\n    setCheckedList(event.target.checked ? column.data : []);\n    setIndeterminate(false);\n    setCheckAll(event.target.checked);\n    handleCheck(event.target.checked ? column.data : []);\n    setTriggered(true);\n  };\n\n  const props = {\n    indeterminate,\n    onChange: onCheckAllChange,\n    checked: checkAll,\n  };\n\n  return (\n    <S.Wrapper>\n      <S.HeaderCol>{column.headerRender ? column.headerRender(column.header, props) : column.header}</S.HeaderCol>\n      <Checkbox.Group value={checkedList} onChange={onChange}>\n        {column.data.map((el, index) => (\n          <S.Col key={index}>{column.dataRender ? column.dataRender(el) : el}</S.Col>\n        ))}\n      </Checkbox.Group>\n    </S.Wrapper>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n\n  & + div {\n    margin-top: 2rem;\n  }\n`;\n","import React, { useCallback, useState } from 'react';\nimport { Checkbox } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport { CheckboxValueType } from 'antd/lib/checkbox/Group';\nimport { BaseButtonsForm } from '@app/components/common/forms/BaseButtonsForm/BaseButtonsForm';\nimport { CheckboxColumn } from '@app/components/profile/profileCard/profileFormNav/nav/notifications/CheckboxColumn/CheckboxColumn';\nimport { Option } from '@app/components/profile/profileCard/profileFormNav/nav/notifications/interfaces';\nimport * as S from './NotificationsTypes.styles';\nimport { BaseButtonsGroup } from '@app/components/common/forms/components/BaseButtonsGroup/BaseButtonsGroup';\nimport { notificationController } from '@app/controllers/notificationController';\n\ninterface Notifications {\n  1: string[];\n  2: string[];\n  3: string[];\n}\n\nexport const NotificationsTypes: React.FC = () => {\n  const { t } = useTranslation();\n  const [isLoading, setLoading] = useState(false);\n  const [checkedElements, setCheckedElements] = useState<Notifications>({\n    1: [],\n    2: [],\n    3: [],\n  });\n\n  const [isTriggered, setTriggered] = useState(false);\n\n  const options: Option[] = [\n    {\n      id: 1,\n      header: t('common.email'),\n      headerRender: (text, props) => <Checkbox {...props}>{text}</Checkbox>,\n      data: [\n        'emailMessages',\n        'emailMentions',\n        'emailReminders',\n        'emailAllNews',\n        'emailImportantNews',\n        'emailActionRequired',\n      ],\n      dataRender: (text) => <Checkbox value={text} />,\n    },\n    {\n      id: 2,\n      header: t('profile.nav.notifications.push'),\n      headerRender: (text, props) => <Checkbox {...props}>{text}</Checkbox>,\n      data: ['pushMessages', 'pushMentions', 'pushReminders', 'pushAllNews', 'pushImportantNews', 'pushActionRequired'],\n      dataRender: (text) => <Checkbox value={text} />,\n    },\n    {\n      id: 3,\n      header: t('profile.nav.notifications.SMS'),\n      headerRender: (text, props) => <Checkbox {...props}>{text}</Checkbox>,\n      data: ['smsMessages', 'smsMentions', 'smsReminders', 'smsAllNews', 'smsImportantNews', 'smsActionRequired'],\n      dataRender: (text) => <Checkbox value={text} />,\n    },\n    {\n      id: 4,\n      header: t('profile.nav.notifications.activities'),\n      data: [\n        t('profile.nav.notifications.directMessages'),\n        t('profile.nav.notifications.mentions'),\n        t('profile.nav.notifications.reminders'),\n        t('profile.nav.notifications.allNews'),\n        t('profile.nav.notifications.importantNews'),\n        t('profile.nav.notifications.actionRequired'),\n      ],\n    },\n  ];\n\n  const handleCheck = useCallback(\n    (mode: number) => (list: CheckboxValueType[]) => {\n      setCheckedElements({ ...checkedElements, [mode]: list });\n    },\n    [checkedElements],\n  );\n\n  const onCancel = useCallback(() => {\n    setTriggered(false);\n  }, [setTriggered]);\n\n  const onFinish = useCallback(async () => {\n    setLoading(true);\n    setTimeout(() => {\n      setLoading(false);\n      setTriggered(false);\n      notificationController.success({ message: t('common.success') });\n      console.log(checkedElements);\n    }, 1000);\n  }, [setTriggered, checkedElements, t]);\n\n  return (\n    <BaseButtonsForm\n      name=\"notifications\"\n      onFinish={onFinish}\n      isFieldsChanged={isTriggered}\n      setFieldsChanged={setTriggered}\n      footer={<BaseButtonsGroup loading={isLoading} onCancel={onCancel} />}\n    >\n      <S.Wrapper>\n        {options.map((item) => (\n          <CheckboxColumn key={item.id} column={item} handleCheck={handleCheck(item.id)} setTriggered={setTriggered} />\n        ))}\n      </S.Wrapper>\n    </BaseButtonsForm>\n  );\n};\n","import { media } from '@app/styles/themes/constants';\nimport { Typography } from 'antd';\nimport styled from 'styled-components';\n\nexport const Description = styled(Typography.Text)`\n  display: block;\n  font-size: 0.75rem;\n  margin-bottom: 1rem;\n\n  @media only screen and ${media.md} {\n    font-size: 1rem;\n    margin-bottom: 2rem;\n  }\n`;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { BaseButtonsForm } from '@app/components/common/forms/BaseButtonsForm/BaseButtonsForm';\nimport { Card } from '@app/components/common/Card/Card';\nimport { NotificationsTypes } from '@app/components/profile/profileCard/profileFormNav/nav/notifications/NotificationsTypes/NotificationsTypes';\nimport * as S from './Notifications.styles';\n\nexport const Notifications: React.FC = () => {\n  const { t } = useTranslation();\n\n  return (\n    <Card>\n      <BaseButtonsForm.Item>\n        <BaseButtonsForm.Title>{t('profile.nav.notifications.settings')}</BaseButtonsForm.Title>\n      </BaseButtonsForm.Item>\n      <S.Description>{t('profile.nav.notifications.description')}</S.Description>\n      <NotificationsTypes />\n    </Card>\n  );\n};\n","import React from 'react';\nimport { Notifications } from '@app/components/profile/profileCard/profileFormNav/nav/notifications/Notifications/Notifications';\nimport { useTranslation } from 'react-i18next';\nimport { PageTitle } from '@app/components/common/PageTitle/PageTitle';\n\nconst NotificationsPage: React.FC = () => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <PageTitle>{t('profile.nav.notifications.title')}</PageTitle>\n      <Notifications />\n    </>\n  );\n};\n\nexport default NotificationsPage;\n"],"sourceRoot":""}